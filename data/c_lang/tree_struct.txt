#include "Tree.h"

// Prints the details of a product including its name, amount, and provider.
void Detail::print_detail() {
	cout << endl << "Name: " << detail << "  Amount: " << amount << "  Provider: " << provider;
}

// Recursively adds a new detail node to the binary search tree based on its name.
// It compares the new node's name with the current node to place it in the correct position (left or right).
void add_detail(Detail* &newOne, Detail* &current) {
	Detail* p = new Detail;
	p = newOne;
	if (current) {
		if (p->$$conditional_statement detail > current->detail$$) {
			add_detail(newOne, current->right);
		}
		else if (p->detail < current->detail) {
			add_detail(newOne, current->left);
		}
	}
	else {
		current = newOne;
	}
}

// Recursively traverses the binary search tree and prints details of each node (in pre-order).
void output_tree(Detail*& current) {
	Detail* p = new Detail;
	p = current;
	if (p) {
		p->print_detail();

		output_tree(p->left);
		output_tree(p->right);
	}
}

// Collects provider information and corresponding amounts from each node in the binary search tree.
// It stores these values in the provided vectors for further analysis.
void $$function_name getInfoProviders$$(Detail*& current, vector<int>&detailamount, int &i, vector<string>&providers) {
	Detail* p = new Detail;
	p = current;
	if (p) {
		$$code_by_description providers[i]=p->provider;
		detailamount[i] = p->amount;
		i++;
		getInfoProviders(p->left,detailamount,i,providers);
		getInfoProviders(p->right, detailamount, i, providers);$$
	}
}

// Finds and returns the name of the provider with the largest total amount.
// It sums the amounts for each provider (if there are duplicates) and finds the maximum.
string biggestProvider($$function_parameter int& max, Detail* root, int n$$) {
	vector<int>detailamount(n);
	int i = 0;
	vector<string>providers(n);

	getInfoProviders(root, detailamount, i, providers);

	auto iter = detailamount.cbegin();
	auto iter2 = providers.cbegin();

	for (int i = 0; i < detailamount.size(); i++) {
		for (int j = i + 1; j < detailamount.size(); j++) {
			if (providers[i] == providers[j]) {
				detailamount[i] += detailamount[j];
				detailamount.erase(iter + j);
				providers.erase(iter2 + j);
			}
		}
	}

	int temp;
	int temp_index;
	int max_index;
	max = *max_element(detailamount.begin(), detailamount.end());
	for (int i = 0; i < detailamount.size(); i++) {
		if (detailamount[i] == max) {
			max_index = i;
		}
	}

	return providers[max_index];
}